// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

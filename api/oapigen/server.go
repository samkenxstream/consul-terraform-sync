// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets all tasks
	// (GET /v1/tasks)
	GetAllTasks(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request, params CreateTaskParams)
	// Marks a task for deletion
	// (DELETE /v1/tasks/{name})
	DeleteTaskByName(w http.ResponseWriter, r *http.Request, name string)
	// Gets a task by name
	// (GET /v1/tasks/{name})
	GetTaskByName(w http.ResponseWriter, r *http.Request, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAllTasks operation middleware
func (siw *ServerInterfaceWrapper) GetAllTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTasks(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateTaskParams

	// ------------- Optional query parameter "run" -------------
	if paramValue := r.URL.Query().Get("run"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "run", r.URL.Query(), &params.Run)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter run: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteTaskByName operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskByName operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", chi.URLParam(r, "name"), &name)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter name: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByName(w, r, name)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.GetAllTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{name}", wrapper.DeleteTaskByName)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{name}", wrapper.GetTaskByName)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dQxOu5v1vwMAAP//a5CkBdAtAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
